# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a job called "init"
  init:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    outputs:
      LANGUAGE_NAME: ${{ steps.get-values.outputs.LANGUAGE_NAME }}
      PROJECT_NAME: ${{ steps.get-values.outputs.PROJECT_NAME }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # OR "2" -> To retrieve the preceding commit.

      # Retrieve all changed files
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v2.0.0

      - name: Get Language & project name
        id: get-values
        run: |
          echo "::set-output name=LANGUAGE_NAME::`echo ${{ steps.changed-files.outputs.all_changed_files }} | sed 's/ /\'$'\n/g' | grep -v  "/workflows/*" | grep '/' | cut -f 1 -d "/" |uniq`"
          echo "::set-output name=PROJECT_NAME::`echo ${{ steps.changed-files.outputs.all_changed_files }} | sed 's/ /\'$'\n/g' | grep -v  "/workflows/*" | grep '/' | cut -f 2 -d "/" |uniq`"
      - name: echo Language & project name
        run: echo ${{ steps.get-values.outputs.LANGUAGE_NAME }} ${{ steps.get-values.outputs.PROJECT_NAME }}

  build-scala:
    needs: init          # Identifies init job that must be completed successfully. 
    runs-on: ubuntu-latest        # The type of machine to run the job on.
    if: needs.init.outputs.LANGUAGE_NAME == 'scala'
    defaults:
      run:
        working-directory: ./${{needs.init.outputs.LANGUAGE_NAME}}/${{needs.init.outputs.PROJECT_NAME}} # specifying the working directory of where to run the command.
        
    steps:

      - uses: actions/checkout@v2  # This action checks-out the repository

      - name: check env   # Name of the step to be perform
        run: echo ${{needs.init.outputs.LANGUAGE_NAME}} ${{needs.init.outputs.PROJECT_NAME}}
        
      - name: check build tool    # Name of the step to be perform
        working-directory: ./${{needs.init.outputs.LANGUAGE_NAME}}/${{needs.init.outputs.PROJECT_NAME}}
        id: build-tool
        run:  |
              echo "::set-output name=TOOL_NAME::`if [ -f "build.sbt" ]; then  
                  echo "sbt"
              elif [ -f "build.gradle" ] 
              then
                  echo "gradle"
              elif [ -f "pom.xml" ]
              then
                  echo "maven"
              elif [ -f "build.xml" ]
              then
                  echo "ant"
              else 
                  echo "scalac"
              fi`"
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Build with sbt
        if: steps.build-tool.outputs.TOOL_NAME == 'sbt'
        run: sbt clean package

      - name: Build with maven
        if: steps.build-tool.outputs.TOOL_NAME == 'maven'
        run: mvn package

      - name: Validate Gradle wrapper
        if: steps.build-tool.outputs.TOOL_NAME == 'gradle'
        uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b

      - name: Build with gradle
        working-directory: ./${{needs.init.outputs.LANGUAGE_NAME}}/${{needs.init.outputs.PROJECT_NAME}}
        if: steps.build-tool.outputs.TOOL_NAME == 'gradle'
        run: ./gradlew build

      - name: Build with ant
        if: steps.build-tool.outputs.TOOL_NAME == 'ant'
        run: ant -noinput -buildfile build.xml

      - name: Build with scalac
        if: steps.build-tool.outputs.TOOL_NAME == 'scalac'
        run: |
            sudo apt install scala -y
            scalac *.scala
            
  build-java:
    needs: init
    runs-on: ubuntu-latest
    env:
      java-version: '11'
    if: needs.init.outputs.LANGUAGE_NAME == 'java'
    defaults:
      run:
        working-directory: ./${{needs.init.outputs.LANGUAGE_NAME}}/${{needs.init.outputs.PROJECT_NAME}}


    steps:

      - uses: actions/checkout@v2
    
      - name: Checkout  private submodules
        uses: actions/checkout@v2
        with:
          lfs: true
          repository: yamikarajput546/TJava
          token: ${{ secrets.GH_PAT || github.token}} #${{ secrets.GH_PAT || github.token }} # `GH_PAT` is a secret that contains PAT
          path: ${{needs.init.outputs.LANGUAGE_NAME}}/${{needs.init.outputs.PROJECT_NAME}}
          ref: ${{ github.head_ref }}


      - name: check build tool
        id: build-tool
        run: |
            echo "::set-output name=TOOL_NAME::`if [ -f "build.sbt" ]; then
                echo "sbt"
            elif [ -f "build.gradle" ]
            then
                echo "gradle"
            elif [ -f "pom.xml" ]
            then
                echo "maven"
            elif [ -f "build.xml" ]
            then
                echo "ant"
            else 
                echo "javac"
            fi`"

            
      - name: Get java version
        id: java-version
        run: | 
            echo "::set-output name=JAVA_VERSION::$(cat java-version.txt)"

        continue-on-error: true
        if: steps.java-version.outcome == 'failure'
          steps.java-version.outputs.JAVA_VERSION  = ${{ env.java_version }}
        # echo "::set-output name=JAVA_VERSION::`echo $(> java-version.txt)`"


      - name: Set up JDK 8
        if: steps.java-version.outputs.JAVA_VERSION == '8'
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'adopt'

      - name: Set up JDK 11
        if: steps.java-version.outputs.JAVA_VERSION == '11'
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Set up JDK 13
        if: steps.java-version.outputs.JAVA_VERSION == '13'
        uses: actions/setup-java@v2
        with:
          java-version: '13'
          distribution: 'adopt'

      - name: Set up JDK 15
        if: steps.java-version.outputs.JAVA_VERSION == '15'
        uses: actions/setup-java@v2
        with:
          java-version: '15'
          distribution: 'adopt'


      - name: Build with sbt
        if: steps.build-tool.outputs.TOOL_NAME == 'sbt'
        run: sbt clean test

      - name: Build with maven
        if: steps.build-tool.outputs.TOOL_NAME == 'maven'
        run: mvn package

      - name: Validate Gradle wrapper
        if: steps.build-tool.outputs.TOOL_NAME == 'gradle'
        uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b

      - name: Build with gradle
        if: steps.build-tool.outputs.TOOL_NAME == 'gradle'
        run: ./gradlew build

      - name: Build with ant
        if: steps.build-tool.outputs.TOOL_NAME == 'ant'
        run: ant -noinput -buildfile build.xml

      - name: Build with javac
        if: steps.build-tool.outputs.TOOL_NAME == 'javac'
        run: javac src/*.java

  build-angular:
    needs: init
    runs-on: ubuntu-latest
    if: needs.init.outputs.LANGUAGE_NAME == 'angular'
    defaults:
      run:
        working-directory: ./${{needs.init.outputs.LANGUAGE_NAME}}/${{needs.init.outputs.PROJECT_NAME}}

    steps:

      - uses: actions/checkout@v2
      
      - name: Checkout submodule
        uses: actions/checkout@v2.0.0
        with:
          token: '${{ secrets.GITHUB_TOKEN }}'
          repository: knoldus/Techhub-template
          path: ${{needs.init.outputs.LANGUAGE_NAME}}/${{needs.init.outputs.PROJECT_NAME}}
          ref: 'master'
      
      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install Dependencies
        run: npm ci

      - name: Build with npm
        run: npm run build
        
  sonarqube:
    needs: [build-angular, build-scala, build-java, init]
    if: |
      !failure() && !cancelled() && 
      (success('build-angular') || success('build-scala')) || (success('build-java')) 
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./${{needs.init.outputs.LANGUAGE_NAME}}/${{needs.init.outputs.PROJECT_NAME}}
        
    steps:
    
      - uses: actions/checkout@v2
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0
          
      - name: Checkout submodule
        uses: actions/checkout@v2.0.0
        with:
          token: '${{ secrets.GITHUB_READ }}'
          repository: knoldus/Techhub-template
          path: ${{needs.init.outputs.LANGUAGE_NAME}}/${{needs.init.outputs.PROJECT_NAME}}
          ref: 'master'

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        with:
          args: >
            -Dsonar.organization=Knoldus
            -Dsonar.projectKey=${{needs.init.outputs.PROJECT_NAME}}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      
